## To find all docker commands
- docker

## docker commands syntax
- docker <managementCommands> <subCommands> (options)

## Image vs Container
- Image is an application we want to run.
- Container is an instance of that image running as a process.
- We can have multiple containers with the same image.

## docker container run --publish 80:80 nginx
- Will download image from docker hub (latest version) if not found locally in image cache.
- Started new container from that image and prepares to start.
- Opened port 80 on the host IP
- Routes the traffic to the container IP, port 80.
- Will run it on the foreground

## Background work when we type `docker container run`
- looks for the image locally in the image cache. If not found.
- looks in the remote image repository (docker hub)
- download the latest version(by default)
- creates a new container based on the image and prepare to start.
- gives it a virtual IP on a private network inside docker engine.
- open up host port and routes the traffic to the container port.
- starts container by using the command specified in the image docker file.

## docker container run --publish 80:80 --detach nginx
- Same as above but will run image in the background.
- returns a unique container Id.

## docker container inspect $containerName
- Displays metadata of the container. (startup, config, volumes, network, etc)

## Docker Network defaults
- each container is connected to a private virtual network named 'bridge' or 'docker0'
- each virtual network routes through NAT firewall on host IP
- all containers can talk to each other without -p
- best practice is to create a new virtual network for each app:
    - network 'my_web_app' for mysql and php/apache containers
    - network 'my_api' for mongo and nodejs containers
- 'Batteries Included, but Removable'
    - defaults works well in many cases but it is easy to swap out parts to customize it.
- make new virtual network
- attach container to more than one virtual network (or none)
- skip virtual network and use host IP (--net=host). We'll loose some of the container benefits but it might be required in some cases.
- use different docker network drivers to gain new abilities.

## docker container inspect --format '{{ .NetworkSettings.IPAddress}}' $containerName
- this command is used to find the host IP address.
- container host IP address is on different network (docker virtual network) when compared with local system. Hence, both IPs are different.

## How network packets move around docker
- refer network diagram 'dockerNetworkCommunication.png' or check video here: https://www.udemy.com/course/docker-mastery/learn/lecture/6758364?start=632#notes

## host network
- It is a special network that skips virtual network of the docker and attaches container directly to the host interface.
- It gains performance by skipping virtual network but sacrifices security of the container modal.

## none network
- it is similar to having an interface on a computer but it is not attached to anything.

## default security by docker network
- create apps so frontend/backend sit on the same docker network
- their inner communication never leaves host
- all externally exposed ports are closed by default.
- we can use -p to manually expose any port
- this gets better with swarm and overlay network